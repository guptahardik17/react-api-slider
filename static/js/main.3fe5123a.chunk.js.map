{"version":3,"sources":["components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["Slider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoadingImageNames","isLoading","imagenames","totalimages","images","activeIndex","left","error","prevSlide","bind","assertThisInitialized","nextSlide","clickIndicator","fetch","headers","Headers","Authorization","Content-Type","response","json","setState","length","fetchImageUrls","i","concat","id","method","response1","json1","push","console","log","fetchImages","_this2","setInterval","sliderWidth","e","preventDefault","parseInt","target","textContent","_this3","style","width","height","sliderHeight","react_default","a","createElement","className","map","item","index","key","src","url","alt","onClick","Component","App","components_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fe5123a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Slider extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isLoadingImageNames: true,\n      isLoading: true,\n      imagenames: [],\n      totalimages: 0,\n      images: [],\n\n      activeIndex: 1,\n      left: 0,\n\n      error: null\n    };\n\n    this.prevSlide = this.prevSlide.bind(this);\n    this.nextSlide = this.nextSlide.bind(this);\n    this.clickIndicator = this.clickIndicator.bind(this);\n  }\n\n\n  async fetchImages() {\n    const response = await\n    fetch(`https://screeningtest.vdocipher.com/api/image/`,{\n          headers: new Headers({\n         'Authorization': 'Bearer fc1be0ce7f79cfe74502163bbc76613e',\n         'Content-Type': 'application/x-www-form-urlencoded'\n       }),\n    });\n    const json = await response.json();\n    this.setState({\n      imagenames: json,\n      totalimages: json.length,\n      isLoadingImageNames: false,\n    })\n\n    this.fetchImageUrls();\n  }\n\n  async fetchImageUrls(){\n    for(var i = 0 ; i<this.state.totalimages; i++){\n      const response1 = await\n      fetch(`https://screeningtest.vdocipher.com/api/image/${this.state.imagenames[i].id}`,{\n            method: 'post',\n            headers: new Headers({\n           'Authorization': 'Bearer fc1be0ce7f79cfe74502163bbc76613e',\n           'Content-Type': 'application/json'\n         }),\n      });\n      const json1 = await response1.json();\n      this.state.images.push(json1);\n    }\n    this.setState({\n      isLoading: false,\n    })\n    console.log(this.state.images);\n  }\n\n\n  componentWillMount() {\n    this.fetchImages();\n  }\n\n  componentDidMount() {\n    setInterval(() => this.nextSlide(), 1000)\n  }\n\n  prevSlide() {\n    this.setState({\n      activeIndex: this.state.activeIndex - 1,\n      left: this.state.left + 400\n    })\n    if (this.state.activeIndex === 1) {\n      this.setState({\n        activeIndex: this.state.activeIndex + this.state.totalimages - 1,\n        left: this.state.left - this.props.sliderWidth * (this.state.totalimages - 1)\n      })\n    }\n  }\n\n  nextSlide() {\n    this.setState({\n      activeIndex: this.state.activeIndex + 1,\n      left: this.state.left - this.props.sliderWidth\n    })\n    if (this.state.activeIndex === this.state.totalimages+1) {\n      this.setState({\n        activeIndex: 1,\n        left: 0\n      })\n    }\n  }\n\n  clickIndicator(e) {\n    e.preventDefault();\n    this.setState({\n      activeIndex: parseInt(e.target.textContent),\n      left: this.props.sliderWidth - parseInt(e.target.textContent) * this.props.sliderWidth\n    })\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    var style = {\n      left: this.state.left,\n      width: this.props.sliderWidth,\n      height: this.props.sliderHeight\n    };\n    return (\n      <div>\n        {!isLoading ? (\n\n        <div id=\"app\">\n          <h1> Avengers Avenue </h1>\n          <br />\n          <div  className=\"slider-wrapper\">\n            <ul className=\"slider\">\n              {this.state.images.map(function(item,index) {\n                return (\n                <li key={index} style={style} className={index+1 === this.state.activeIndex ? 'slider-item' : 'hide'}>\n                <img src={item.url} width=\"400px\" height=\"250px\" alt={item.id}/>\n                </li>\n                )\n              },this)\n              }\n            </ul>\n          </div>\n          <div className=\"buttons-wrapper\">\n          <button className=\"prev-button\" onClick={this.prevSlide}></button>\n          <button className=\"next-button\" onClick={this.nextSlide}></button>\n          </div>\n          <div className=\"indicators-wrapper\">\n            <ul className=\"indicators\">\n              {this.state.images.map((item,index)=> {\n                return (\n                  <li key={index} className={index+1 === this.state.activeIndex ? 'active-indicator' : ''}onClick={this.clickIndicator}>{index+1}</li>\n                )\n                },this)\n              }\n            </ul>\n          </div>\n        </div>\n\n        ) : (\n          <h3>Loading...</h3>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Slider;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Slider from './components/Slider';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Slider sliderWidth=\"400\" sliderHeight=\"250\"/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}